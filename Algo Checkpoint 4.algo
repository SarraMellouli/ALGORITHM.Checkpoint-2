PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, VAR dot : INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes we cannot calculat dot product");
        dot := NaN; // NaN : not definte number
    END_IF
    WHILE (i <v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
END




ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
    // Read Size of elements of V1 
    n1 := read_size();
    // Read elements of V1
    read_array(n1,v1);
    // Read Size of elements of V2 
    n2 := read_size();
    // Read elements of V2
    read_array(n2,v2);
    dot_product(v1,v2,dot);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END




FUNCTION dot_product (v1 , v2 : ARRAY_OF INTEGER [10];) : INTEGER
VAR
    i , dot :INTEGER
BEGIN
    dot := 0
    i := 0

    IF (v1.length <> v2.length) THEN
        write ("vectors with diff size ! we cannot calc the prod")
        dot := NAN
    END_IF

    while (i< v1.length){
        dot := dot + v1[i] * v2[i]
        i++ 
    }

    RETURN dot ;
END


ALGORITHM wji3et_RAS
VAR
    v1 ,v2 : ARRAY_OF INTEGER [10]
    i : INTEGER
    dot : INTEGER
BEGIN
    FOR i FROM 0 TO v1.length STEP step 1  DO
        write (" enter element of " i+1 )
        read (v1[i])
    END_FOR 

    FOR i FROM 0 TO v2.length STEP step 1  DO
        write (" enter element of " i+1 )
        read (v2[i])
    END_FOR

    dot := dot_product(v1 , v2)
    
    IF (dot := 0) THEN
        write("v1 et v2 sont orth")
    ELSE
        write ("v1 et v2 mahhhhhhhoooooooomch orth ")
    END_IF



END